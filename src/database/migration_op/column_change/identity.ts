import { Difference } from "microdiff";
import { ChangeSetType, Changeset } from "~/database/changeset.js";
import type { ColumnInfo } from "~/database/schema/pg_column.js";
import { MigrationOpPriority, executeKyselyDbStatement } from "../compute.js";

export type IdentityAddDifference = {
	type: "CHANGE";
	path: ["table", string, string, "identity"];
	value: NonNullable<ColumnInfo["identity"]>;
	oldValue: null;
};

export type IdentityDropDifference = {
	type: "CHANGE";
	path: ["table", string, string, "identity"];
	value: null;
	oldValue: NonNullable<ColumnInfo["identity"]>;
};

export function isColumnIdentityAdd(
	test: Difference,
): test is IdentityAddDifference {
	return (
		test.type === "CHANGE" &&
		test.path[0] === "table" &&
		test.path.length === 4 &&
		test.path[3] === "identity" &&
		test.value !== null &&
		test.oldValue === null
	);
}

export function isColumnIdentityDrop(
	test: Difference,
): test is IdentityDropDifference {
	return (
		test.type === "CHANGE" &&
		test.path[0] === "table" &&
		test.path.length === 4 &&
		test.path[3] === "identity" &&
		test.value === null &&
		test.oldValue !== null
	);
}

export function columnIdentityAddMigrationOperation(
	diff: IdentityAddDifference,
) {
	const tableName = diff.path[1];
	const columnName = diff.path[2];
	const changeset: Changeset = {
		priority: MigrationOpPriority.ChangeColumnIdentityAdd,
		tableName: tableName,
		type: ChangeSetType.ChangeColumn,
		up:
			diff.value === "ALWAYS"
				? executeKyselyDbStatement(
						`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} ADD GENERATED ALWAYS AS IDENTITY`,
				  )
				: executeKyselyDbStatement(
						`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} ADD GENERATED BY DEFAULT AS IDENTITY`,
				  ),
		down: executeKyselyDbStatement(
			`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} DROP IDENTITY`,
		),
	};
	return changeset;
}

export function columnIdentityDropMigrationOperation(
	diff: IdentityDropDifference,
) {
	const tableName = diff.path[1];
	const columnName = diff.path[2];
	const changeset: Changeset = {
		priority: MigrationOpPriority.ChangeColumnIdentityDrop,
		tableName: tableName,
		type: ChangeSetType.ChangeColumn,
		up: executeKyselyDbStatement(
			`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} DROP IDENTITY`,
		),
		down:
			diff.oldValue === "ALWAYS"
				? executeKyselyDbStatement(
						`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} ADD GENERATED ALWAYS AS IDENTITY`,
				  )
				: executeKyselyDbStatement(
						`ALTER TABLE ${tableName} ALTER COLUMN ${columnName} ADD GENERATED BY DEFAULT AS IDENTITY`,
				  ),
	};
	return changeset;
}
