import { afterEach, beforeEach, describe, test } from "vitest";
import { pgInteger } from "~/database/schema/pg_column.js";
import { pgDatabase } from "~/database/schema/pg_database.js";
import { pgTable } from "~/database/schema/pg_table.js";
import { testChangesetAndMigrations } from "~tests/helpers/migration_success.js";
import { setUpContext, teardownContext } from "~tests/helpers/test_context.js";
import { type DbContext } from "~tests/setup.js";

describe("Identity columns", () => {
	beforeEach<DbContext>(async (context) => {
		await setUpContext(context);
	});

	afterEach<DbContext>(async (context) => {
		await teardownContext(context);
	});

	test<DbContext>("add", async (context) => {
		await context.kysely.schema.createTable("users").execute();

		const database = pgDatabase({
			tables: {
				users: pgTable({
					columns: {
						id: pgInteger().generatedAlwaysAsIdentity(),
						count: pgInteger().generatedByDefaultAsIdentity(),
					},
				}),
			},
		});

		const expected = [
			{
				priority: 2002,
				tableName: "users",
				type: "createColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'addColumn("id", "integer", (col) => col.notNull().generatedAlwaysAsIdentity())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'dropColumn("id")',
					"execute();",
				],
			},
			{
				priority: 2002,
				tableName: "users",
				type: "createColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'addColumn("count", "integer", (col) => col.notNull().generatedByDefaultAsIdentity())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'dropColumn("count")',
					"execute();",
				],
			},
		];

		await testChangesetAndMigrations({
			context,
			database,
			expected,
			down: "reverse",
		});
	});

	test<DbContext>("remove", async (context) => {
		await context.kysely.schema
			.createTable("users")
			.addColumn("id", "integer", (col) =>
				col.notNull().generatedAlwaysAsIdentity(),
			)
			.addColumn("count", "integer", (col) =>
				col.notNull().generatedByDefaultAsIdentity(),
			)
			.execute();

		const database = pgDatabase({
			tables: {
				users: pgTable({
					columns: {},
				}),
			},
		});

		const expected = [
			{
				priority: 1005,
				tableName: "users",
				type: "dropColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'dropColumn("count")',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'addColumn("count", "integer", (col) => col.notNull().generatedByDefaultAsIdentity())',
					"execute();",
				],
			},
			{
				priority: 1005,
				tableName: "users",
				type: "dropColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'dropColumn("id")',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'addColumn("id", "integer", (col) => col.notNull().generatedAlwaysAsIdentity())',
					"execute();",
				],
			},
		];

		await testChangesetAndMigrations({
			context,
			database,
			expected,
			down: "reverse",
		});
	});

	test<DbContext>("change into", async (context) => {
		await context.kysely.schema
			.createTable("users")
			.addColumn("id", "integer")
			.addColumn("count", "integer")
			.execute();

		const database = pgDatabase({
			tables: {
				users: pgTable({
					columns: {
						id: pgInteger().generatedAlwaysAsIdentity(),
						count: pgInteger().generatedByDefaultAsIdentity(),
					},
				}),
			},
		});

		const expected = [
			{
				priority: 3008,
				tableName: "users",
				type: "changeColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("count", (col) => col.setNotNull())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("count", (col) => col.dropNotNull())',
					"execute();",
				],
			},
			{
				priority: 3008,
				tableName: "users",
				type: "changeColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("id", (col) => col.setNotNull())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("id", (col) => col.dropNotNull())',
					"execute();",
				],
			},
			{
				priority: 3009,
				tableName: "users",
				type: "changeColumn",
				up: [
					'await sql`ALTER TABLE users ALTER COLUMN "count" ADD GENERATED BY DEFAULT AS IDENTITY`.execute(db);',
				],
				down: [
					'await sql`ALTER TABLE users ALTER COLUMN "count" DROP IDENTITY`.execute(db);',
				],
			},
			{
				priority: 3009,
				tableName: "users",
				type: "changeColumn",
				up: [
					'await sql`ALTER TABLE users ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY`.execute(db);',
				],
				down: [
					'await sql`ALTER TABLE users ALTER COLUMN "id" DROP IDENTITY`.execute(db);',
				],
			},
		];

		await testChangesetAndMigrations({
			context,
			database,
			expected,
			down: "reverse",
		});
	});

	test<DbContext>("change from", async (context) => {
		await context.kysely.schema
			.createTable("users")
			.addColumn("id", "integer", (col) =>
				col.notNull().generatedAlwaysAsIdentity(),
			)
			.addColumn("count", "integer", (col) =>
				col.notNull().generatedByDefaultAsIdentity(),
			)
			.execute();

		const database = pgDatabase({
			tables: {
				users: pgTable({
					columns: {
						id: pgInteger(),
						count: pgInteger(),
					},
				}),
			},
		});

		const expected = [
			{
				priority: 3004,
				tableName: "users",
				type: "changeColumn",
				up: [
					'await sql`ALTER TABLE users ALTER COLUMN "count" DROP IDENTITY`.execute(db);',
				],
				down: [
					'await sql`ALTER TABLE users ALTER COLUMN "count" ADD GENERATED BY DEFAULT AS IDENTITY`.execute(db);',
				],
			},
			{
				priority: 3004,
				tableName: "users",
				type: "changeColumn",
				up: [
					'await sql`ALTER TABLE users ALTER COLUMN "id" DROP IDENTITY`.execute(db);',
				],
				down: [
					'await sql`ALTER TABLE users ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY`.execute(db);',
				],
			},
			{
				priority: 3008,
				tableName: "users",
				type: "changeColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("count", (col) => col.dropNotNull())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("count", (col) => col.setNotNull())',
					"execute();",
				],
			},
			{
				priority: 3008,
				tableName: "users",
				type: "changeColumn",
				up: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("id", (col) => col.dropNotNull())',
					"execute();",
				],
				down: [
					"await db.schema",
					'alterTable("users")',
					'alterColumn("id", (col) => col.setNotNull())',
					"execute();",
				],
			},
		];

		await testChangesetAndMigrations({
			context,
			database,
			expected,
			down: "reverse",
		});
	});
});
